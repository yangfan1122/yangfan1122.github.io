<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTTP 的 OPTIONS 方法</title>
      <link href="/2021/08/06/net/options/"/>
      <url>/2021/08/06/net/options/</url>
      
        <content type="html"><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTTP 的 OPTIONS 方法 用于获取目的资源所支持的通信选项</span><br></pre></td></tr></table></figure><h4 id="触发条件"><a href="#触发条件" class="headerlink" title="触发条件"></a>触发条件</h4><p>当请求满足下述任一条件时，即应首先发送预检请求（使用OPTIONS）：</p><p>1、使用了下面任一 HTTP 方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PUT</span><br><span class="line"></span><br><span class="line">DELETE</span><br><span class="line"></span><br><span class="line">CONNECT</span><br><span class="line"></span><br><span class="line">OPTIONS</span><br><span class="line"></span><br><span class="line">TRACE</span><br><span class="line"></span><br><span class="line">PATCH</span><br></pre></td></tr></table></figure><p>2、人为设置了对 CORS 安全的首部字段集合之外的其他首部字段。该集合为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Accept</span><br><span class="line"></span><br><span class="line">Accept-Language</span><br><span class="line"></span><br><span class="line">Content-Language</span><br><span class="line"></span><br><span class="line">Content-Type (but note the additional requirements below)</span><br><span class="line"></span><br><span class="line">DPR</span><br><span class="line"></span><br><span class="line">Downlink</span><br><span class="line"></span><br><span class="line">Save-Data</span><br><span class="line"></span><br><span class="line">Viewport-Width</span><br><span class="line"></span><br><span class="line">Width</span><br></pre></td></tr></table></figure><p>3、Content-Type 的值不属于下列之一:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">multipart/form-data</span><br><span class="line"></span><br><span class="line">text/plain</span><br></pre></td></tr></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><ul><li><p>可以使用 OPTIONS 方法对服务器发起请求，以检测服务器支持哪些 HTTP 方法</p></li><li><p>在 CORS 中，可以使用 OPTIONS 方法发起一个预检请求，以检测实际请求是否可以被服务器所接受</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>verdaccio内网npm仓库搭建及更新</title>
      <link href="/2021/07/27/others/verdaccio/"/>
      <url>/2021/07/27/others/verdaccio/</url>
      
        <content type="html"><![CDATA[<h3 id="安装Verdaccio"><a href="#安装Verdaccio" class="headerlink" title="安装Verdaccio"></a>安装Verdaccio</h3><ul><li>安装</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global verdaccio</span><br></pre></td></tr></table></figure><ul><li>注册npm到本地</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm set registry http://localhost:4873/</span><br></pre></td></tr></table></figure><h3 id="内网添加包"><a href="#内网添加包" class="headerlink" title="内网添加包"></a>内网添加包</h3><ul><li>命令行启动Verdaccio</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">verdaccio</span><br></pre></td></tr></table></figure><p>命令行显示以下内容，则成功启动。<strong>config file所在目录即verdaccio的storage的位置。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">warn --- config file  - /Users/用户名/.config/verdaccio/config.yaml</span><br><span class="line">warn --- Verdaccio started</span><br><span class="line">warn --- Plugin successfully loaded: verdaccio-htpasswd</span><br><span class="line">warn --- Plugin successfully loaded: verdaccio-audit</span><br><span class="line">warn --- http address - http://localhost:4873/ - verdaccio/4.10.0</span><br></pre></td></tr></table></figure><ul><li>清理本地npm缓存<br>目的是确保需要安装的包(.tgz)能下载到本机，避免从缓存直接安装</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm cache clean --force</span><br></pre></td></tr></table></figure><ul><li><p>删除本地verdaccio storage下所有包<br>只更新本次需要的包，避免重复导入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// win7</span><br><span class="line">C:\Users\用户名\AppData\Roaming\verdaccio\storage</span><br><span class="line"></span><br><span class="line">// win10</span><br><span class="line">C:\Users\用户名\.config\verdaccio\storage</span><br></pre></td></tr></table></figure></li><li><p>随便一个空目录，安装需要的npm包</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i 包名</span><br></pre></td></tr></table></figure><ul><li>查找verdaccio的storage是否有刚安装的包</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\用户名\AppData\Roaming\verdaccio</span><br><span class="line">or</span><br><span class="line">C:\Users\用户名\.config\verdaccio</span><br></pre></td></tr></table></figure><ul><li>如有，将storage目录导入内网覆盖相同目录即可。</li></ul><h3 id="Verdaccio的storage里的包里只有package-json，没有-tgz时"><a href="#Verdaccio的storage里的包里只有package-json，没有-tgz时" class="headerlink" title="Verdaccio的storage里的包里只有package.json，没有.tgz时"></a>Verdaccio的storage里的包里只有package.json，没有.tgz时</h3><ul><li>删掉storage里的包，并清理npm缓存后，重新安装</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript的加载与执行</title>
      <link href="/2021/07/26/javascript/javascript-fetch-evaluate/"/>
      <url>/2021/07/26/javascript/javascript-fetch-evaluate/</url>
      
        <content type="html"><![CDATA[<h3 id="加载与执行的特点"><a href="#加载与执行的特点" class="headerlink" title="加载与执行的特点"></a>加载与执行的特点</h3><ul><li>加载好即执行</li><li>阻塞浏览器后续动作（渲染页面、加载其他资源。。。）</li></ul><p>所以，很多网站会把script标签放在页面最下或者onload回调里 </p><h3 id="异步加载的可能"><a href="#异步加载的可能" class="headerlink" title="异步加载的可能"></a>异步加载的可能</h3><h4 id="async"><a href="#async" class="headerlink" title="async"></a>async</h4><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-async">MDN Web Docs</a>上的描述：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">async</span><br><span class="line"></span><br><span class="line">For classic scripts, if the async attribute is present, then the classic script will be fetched in parallel to parsing and evaluated as soon as it is available.</span><br><span class="line"></span><br><span class="line">For module scripts, if the async attribute is present then the scripts and all their dependencies will be executed in the defer queue, therefore they will get fetched in parallel to parsing and evaluated as soon as they are available.</span><br></pre></td></tr></table></figure><p>里面有个模棱两可的说法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">as soon as ... available</span><br></pre></td></tr></table></figure><p>这里的 as soon as 就很迷，一旦、尽快。那到底是什么时候？  </p><p>测试一下，加了async的script标签里的普通js会正常加载，并不影响后续其他资源的加载和页面的渲染。进一步观察，当页面所需资源都加载好，若此时async的script标签也加载好了，则会立即执行里面的脚本。所以，执行时机还是不确定。</p><h4 id="动态创建DOM"><a href="#动态创建DOM" class="headerlink" title="动态创建DOM"></a>动态创建DOM</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">&quot;script&quot;</span>)</span><br><span class="line">script.setAttribute(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;text/javascript&quot;</span>)</span><br><span class="line">script.setAttribute(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;xx.js&quot;</span>)</span><br><span class="line">script.setAttribute(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;xx_script_id&quot;</span>)</span><br><span class="line">script_id = <span class="built_in">document</span>.getElementById(<span class="string">&quot;xx_script_id&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> (script_id) &#123;</span><br><span class="line">  <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;head&quot;</span>)[<span class="number">0</span>].removeChild(script_id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;head&quot;</span>)[<span class="number">0</span>].appendChild(script)</span><br></pre></td></tr></table></figure><p>跑下题，这就是JSONP的实现方式。<br>用script标签加载接口，接口返回数据作为参数传递给回调方法。  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://server2.example.com/RetrieveUser?UserId=1823&amp;jsonp=parseResponse&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parseResponse(&#123;&quot;Name&quot;: &quot;小明&quot;, &quot;Id&quot; : 1823, &quot;Rank&quot;: 7&#125;)</span><br></pre></td></tr></table></figure><p>回到异步加载。创建DOM解决了“想什么时候加载就什么时候加载”的问题，但并没解决“想什么时候执行就什么时候执行”的问题。  </p><p>我们退而求其次，将动态创建DOM绑定到某个事件（onload、onclick…）上，当触发该事件时加载并执行js。</p><h4 id="终极方式"><a href="#终极方式" class="headerlink" title="终极方式"></a>终极方式</h4><p>利用浏览器缓存。直接在某个合适时机通过XMLHttpRequest或fetch请求一次js，让浏览器缓存住。当然，动态创建DOM去加载的步骤还是不能省。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 都不必处理readystatechange事件</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;xxx.js&#x27;</span>)</span><br><span class="line">xhr.send(<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个应用在微信小程序中提取图片主要颜色的工具库</title>
      <link href="/2021/07/21/weixin/dominantHue/"/>
      <url>/2021/07/21/weixin/dominantHue/</url>
      
        <content type="html"><![CDATA[<h1 id="dominantHue"><a href="#dominantHue" class="headerlink" title="dominantHue"></a>dominantHue</h1><p>一个应用在微信小程序中提取图片主要颜色的工具库。  </p><p><a href="https://github.com/yangfan1122/dominantHue">https://github.com/yangfan1122/dominantHue</a></p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>在wxml中添加canvas标签</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas canvas-id=<span class="string">&#x27;img-canvas&#x27;</span>&gt;&lt;/canvas&gt;</span><br></pre></td></tr></table></figure><p>相应的<a href="https://raw.githubusercontent.com/yangfan1122/dominantHue/master/mainColorTest/utils.js">js文件</a>中引入库</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;utils.js&#x27;</span>).utils;</span><br></pre></td></tr></table></figure><p>在合适的状态里（如onLoad、onReady等）调用colors方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> imagePath = <span class="string">&quot;example-image.jpg&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> canvasId = <span class="string">&quot;img-canvas&quot;</span>;</span><br><span class="line">utils.colors(imagePath, canvasId, &#123;</span><br><span class="line"><span class="attr">success</span> : <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;dominant: &quot;</span> + res.dominant);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;secondary: &quot;</span> + res.secondary);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;palette: &quot;</span> + res.palette);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fontColor = utils.isLight(res.dominant) ? <span class="string">&quot;#000000&quot;</span> : <span class="string">&quot;#ffffff&quot;</span>;<span class="comment">//根据主要颜色设置字体颜色</span></span><br><span class="line"><span class="keyword">const</span> bgColor = utils.rgbToHex(res.dominant);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;bgColor: &quot;</span> + bgColor);</span><br><span class="line"><span class="comment">//设置导航栏背景色及标题颜色</span></span><br><span class="line">wx.setNavigationBarColor(&#123;</span><br><span class="line"><span class="attr">frontColor</span> : fontColor, </span><br><span class="line"><span class="attr">backgroundColor</span> : bgColor,</span><br><span class="line"><span class="attr">animation</span> : &#123;</span><br><span class="line"><span class="attr">duration</span> : <span class="number">400</span>,</span><br><span class="line"><span class="attr">timingFunc</span> : <span class="string">&#x27;easeIn&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">width</span>: <span class="number">375</span>,</span><br><span class="line"><span class="attr">height</span>: <span class="number">280</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h3><h4 id="imagePath"><a href="#imagePath" class="headerlink" title="imagePath"></a><code>imagePath</code></h4><p>Type: <code>string</code><br>图片地址</p><h4 id="canvasId"><a href="#canvasId" class="headerlink" title="canvasId"></a><code>canvasId</code></h4><p>Type: <code>string</code><br>canvas标签Id</p><h4 id="options"><a href="#options" class="headerlink" title="options"></a><code>options</code></h4><p>success: 获取颜色成功后的回调<br>width: canvas宽<br>height: canvas高  </p><h3 id="微信小程序的限制"><a href="#微信小程序的限制" class="headerlink" title="微信小程序的限制"></a>微信小程序的限制</h3><p>常规Web开发中，可通过getImageData获取像素数据。<br>但小程序中只能通过canvas的wx.canvasGetImageData获取图片像素数据。<br>canvas加载图片并无类似onload等事件通知加载完毕，所以此处采用了轮询方式（轮询条件还需进一步验证）检查加载完毕。  </p><h3 id="源码来源"><a href="#源码来源" class="headerlink" title="源码来源"></a>源码来源</h3><p><a href="https://github.com/briangonzalez/rgbaster.js">RGBaster</a><br>只是做了适合微信小程序使用的改造</p>]]></content>
      
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node中的let</title>
      <link href="/2021/07/20/nodejs/let_in_nodejs/"/>
      <url>/2021/07/20/nodejs/let_in_nodejs/</url>
      
        <content type="html"><![CDATA[<p>手上node.js项目用pm2管理node进程。  </p><p>重启服务，pm2 stop app停止进程，再用pm2 start ecosystem.json启动。  </p><p>预订的6个进程并未全部开启，并且cpu占用奇高。查看pm2错误日志，里面错误如下：<br>SyntaxError: Block-scoped declarations (let, const, function, class) not yet supported outside strict mode  </p><p>修改的代码恰好用到let关键字，至此，错误排查完毕。  </p><p>查询node.js相关信息，如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">所有的 ECMAScript 2015 (ES6) 功能将被分为三个部分 shipping，staged 和 in progress：</span><br><span class="line"></span><br><span class="line">所有 shipping：在 V8 引擎中认为是稳定的，转变成 Node.js 默认，并且 不会 需要任何运行时标记。</span><br><span class="line">Staged：这些是将要完成的特性，并且在 V8 团队看来并不一定稳定，需要一个 --harmony 标记。</span><br><span class="line">In progress：这些特性可以通过各自单独的 harmony 标记被激活使用。除非为了测试用途，否则绝不鼓励这样做。值得注意的是这些标记是借由 V8 引擎公开，将来或许会有潜在的变化而不会有任何免责声明或者协议。</span><br><span class="line"></span><br><span class="line">『shipping』 已经开启的 ES6 特性</span><br><span class="line">目前默认开启的 ES6 特性如下：</span><br><span class="line"></span><br><span class="line">Block scoping</span><br><span class="line">let (strict mode only)</span><br><span class="line">const</span><br><span class="line">function-in-blocks (strict mode only [1])</span><br><span class="line">Classes (strict mode only)</span><br><span class="line">Collections</span><br><span class="line">Map</span><br><span class="line">WeakMap</span><br><span class="line">Set</span><br><span class="line">WeakSet</span><br><span class="line">Typed arrays</span><br><span class="line">Generators</span><br><span class="line">Binary and Octal literals</span><br><span class="line">Object literal extensions (shorthand properties and methods)</span><br><span class="line">Promises</span><br><span class="line">New String methods</span><br><span class="line">Symbols</span><br><span class="line">Template strings</span><br><span class="line">Arrow Functions</span><br><span class="line">new.target [2]</span><br><span class="line">Object.assign</span><br><span class="line">Spread operator [2]</span><br></pre></td></tr></table></figure><p><strong>所以，在非严格模式下的node.js中没法用let关键字</strong></p><p>02 Nov 2018  </p>]]></content>
      
      
      
        <tags>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript + WebStorm</title>
      <link href="/2021/07/20/typescript/TypeScriptWebStorm/"/>
      <url>/2021/07/20/typescript/TypeScriptWebStorm/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/yangfan1122/docs/blob/gh-pages/examples/2017-07-10-TypeScript.rar">ppt</a></p><p>10 Jul 2017  </p>]]></content>
      
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>删除保留文件夹以外的其他文件夹</title>
      <link href="/2021/07/20/others/rd/"/>
      <url>/2021/07/20/others/rd/</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">set re=&quot;被保留文件夹&quot;</span><br><span class="line">pushd &quot;被保留文件夹目录&quot;</span><br><span class="line">for /f &quot;delims=&quot; %%a in (&#x27;dir /a/b^|findstr/ixvc:%re:&quot; &quot;=&quot; /c:&quot;%&#x27;) do (</span><br><span class="line">if exist &quot;%%a\&quot; (</span><br><span class="line">rd /s /q &quot;%%a\&quot;</span><br><span class="line">) else echo del /a /f &quot;%%a&quot; 2&gt;nul</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>01 Apr 2017  </p>]]></content>
      
      
      
        <tags>
            
            <tag> 批处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Detector.d.ts</title>
      <link href="/2021/07/20/typescript/Detector.d.ts/"/>
      <url>/2021/07/20/typescript/Detector.d.ts/</url>
      
        <content type="html"><![CDATA[<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Type definitions for three.js (Detector.js)</span></span><br><span class="line"><span class="comment">// Project: https://github.com/mrdoob/three.js/blob/master/examples/js/Detector.js</span></span><br><span class="line"><span class="comment">// Definitions by: Satoru Kimura</span></span><br><span class="line"><span class="comment">// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped</span></span><br><span class="line"><span class="keyword">interface</span> DetectorStatic &#123;</span><br><span class="line">  <span class="attr">canvas</span>: <span class="built_in">boolean</span>;</span><br><span class="line">  webgl: <span class="built_in">boolean</span>;</span><br><span class="line">  workers: <span class="built_in">boolean</span>;</span><br><span class="line">  fileapi: <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line">  getWebGLErrorMessage(): HTMLElement;</span><br><span class="line">  addGetWebGLMessage(parameters?: &#123; id?: <span class="built_in">string</span>; parent?: HTMLElement &#125;): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> Detector: DetectorStatic;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>24 Mar 2017  </p>]]></content>
      
      
      
        <tags>
            
            <tag> typescript </tag>
            
            <tag> 声明文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="/2021/07/20/typescript/typescript/"/>
      <url>/2021/07/20/typescript/typescript/</url>
      
        <content type="html"><![CDATA[<h2 id="FileWatcher"><a href="#FileWatcher" class="headerlink" title="FileWatcher"></a>FileWatcher</h2><p>File Watcher Arguments:  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--sourcemap $FilePath$ --out $ProjectFileDir$/bin/******.js --module amd --target ES5 --removeComments</span><br></pre></td></tr></table></figure><p>build-in compiler Default options:  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--module amd --target ES5 --removeComments --outFile ./bin/******.js</span><br></pre></td></tr></table></figure><h2 id="tslint-json"><a href="#tslint-json" class="headerlink" title="tslint.json"></a>tslint.json</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;extends&quot;</span> : <span class="string">&quot;tslint:latest&quot;</span>,</span><br><span class="line">   <span class="string">&quot;rules&quot;</span> : &#123;</span><br><span class="line">      <span class="string">&quot;interface-name&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">      <span class="string">&quot;max-line-length&quot;</span> : [<span class="literal">true</span>, <span class="number">540</span>],</span><br><span class="line">      <span class="string">&quot;member-ordering&quot;</span> : [<span class="literal">true</span>,</span><br><span class="line">         <span class="string">&quot;public-before-private&quot;</span>,</span><br><span class="line">         <span class="string">&quot;static-before-instance&quot;</span>,</span><br><span class="line">         <span class="string">&quot;variables-before-functions&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;comment-format&quot;</span>: [<span class="literal">false</span>,</span><br><span class="line">         <span class="string">&quot;check-space&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;whitespace&quot;</span> : [<span class="literal">false</span>,</span><br><span class="line">         <span class="string">&quot;whitespace&quot;</span>,</span><br><span class="line">         <span class="string">&quot;typedef-whitespace&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;typedef-whitespace&quot;</span>: [<span class="literal">true</span>, &#123;</span><br><span class="line">         <span class="string">&quot;call-signature&quot;</span>: <span class="string">&quot;nospace&quot;</span>,</span><br><span class="line">         <span class="string">&quot;index-signature&quot;</span>: <span class="string">&quot;nospace&quot;</span>,</span><br><span class="line">         <span class="string">&quot;parameter&quot;</span>: <span class="string">&quot;nospace&quot;</span>,</span><br><span class="line">         <span class="string">&quot;property-declaration&quot;</span>: <span class="string">&quot;nospace&quot;</span>,</span><br><span class="line">         <span class="string">&quot;variable-declaration&quot;</span>: <span class="string">&quot;nospace&quot;</span></span><br><span class="line">      &#125;]</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>05 Jan 2017  </p>]]></content>
      
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批处理修改替换文件名</title>
      <link href="/2021/07/20/others/rename_bat/"/>
      <url>/2021/07/20/others/rename_bat/</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">set strtemp3=文件扩展名</span><br><span class="line">set strtemp1=被替换字符</span><br><span class="line">set strtemp2=替换字符</span><br><span class="line">setlocal enabledelayedexpansion</span><br><span class="line">for /f &quot;delims=&quot; %%a in (&#x27;dir /a /b *.%strtemp3%&#x27;) do (</span><br><span class="line">set nobird=%%a</span><br><span class="line">ren &quot;%%~a&quot; &quot;!nobird:%strtemp1%=%strtemp2%!&quot;)</span><br></pre></td></tr></table></figure><p>ps. 字符中包含汉字时，另存bat文件Encoding为ANSI即可。  </p><p>10 Oct 2016  </p>]]></content>
      
      
      
        <tags>
            
            <tag> 批处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript自定义事件</title>
      <link href="/2021/07/20/typescript/customevent/"/>
      <url>/2021/07/20/typescript/customevent/</url>
      
        <content type="html"><![CDATA[<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">E</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> dispatcher: Element = <span class="built_in">document</span>.createElement(<span class="string">&quot;dispatcher&quot;</span>);</span><br><span class="line">  <span class="keyword">public</span> dispatch(event: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.dispatcher.dispatchEvent(<span class="keyword">new</span> Event(event));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">let</span> evt = <span class="built_in">document</span>.createEvent(<span class="string">&quot;HTMLEvents&quot;</span>);<span class="comment">//IE</span></span><br><span class="line">      evt.initEvent(event, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">      <span class="built_in">this</span>.dispatcher.dispatchEvent(evt);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>06 Aug 2016  </p>]]></content>
      
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How does removeEventListener work in Object Context</title>
      <link href="/2021/07/20/javascript/removeEventListener_works_in_Object_Context/"/>
      <url>/2021/07/20/javascript/removeEventListener_works_in_Object_Context/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">handler</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">myhandler</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;click&#x27;</span>);</span><br><span class="line">    <span class="built_in">this</span>.target.removeEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="built_in">this</span>.handler);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">target</span>: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;BtnID&#x27;</span>),</span><br><span class="line">  <span class="attr">init</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.handler = <span class="built_in">this</span>.myhandler.bind(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">this</span>.target.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="built_in">this</span>.handler);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj.init();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>12 May 2016  </p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取视频重定向后的域</title>
      <link href="/2021/07/20/as3/gets_the_domain_after_redirect_action/"/>
      <url>/2021/07/20/as3/gets_the_domain_after_redirect_action/</url>
      
        <content type="html"><![CDATA[<p>播视频，获取重定向后的域，办法很风骚～～ 可以解决像素级访问没有策略文件的问题<br>仅限debug版flashplayer有效，发布版error.message只有错误码，无更多信息  </p><p><a href="http://jessewarden.com/2009/03/handling-crossdomainxml-and-302-redirects-using-netstream.html">来源</a></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> bit: BitmapData = <span class="keyword">new</span> BitmapData(progressiveVideoPlayer.measuredWidth, progressiveVideoPlayer.measuredHeight, <span class="literal">false</span>, <span class="number">0x000000</span>);</span><br><span class="line">  bit.draw(progressiveVideoPlayer);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (error: SecurityError) &#123;</span><br><span class="line">  trace(<span class="string">&quot;error : &quot;</span> + error);</span><br><span class="line">  <span class="keyword">var</span> address: <span class="built_in">String</span>, <span class="attr">protocol</span>: <span class="built_in">String</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> _arr: <span class="built_in">Array</span> = error.toString().split(<span class="string">&quot; &quot;</span>)[<span class="number">5</span>].split(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    address = _arr[<span class="number">2</span>];</span><br><span class="line">    protocol = _arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> policyFileURL: <span class="built_in">String</span> = protocol + <span class="string">&quot;//&quot;</span> + address + <span class="string">&quot;/crossdomain.xml&quot;</span>;</span><br><span class="line">    Security.loadPolicyFile(policyFileURL);<span class="comment">//不会马上执行，在下次需要策略文件时才加载</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (error: <span class="built_in">Error</span>) &#123;</span><br><span class="line">    trace(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>20 Oct 2015  </p>]]></content>
      
      
      
        <tags>
            
            <tag> as3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于store.js实现的跨浏览器持久化数据方案。</title>
      <link href="/2021/07/20/html5/storejsplus/"/>
      <url>/2021/07/20/html5/storejsplus/</url>
      
        <content type="html"><![CDATA[<h1 id="storejsplus"><a href="#storejsplus" class="headerlink" title="storejsplus"></a>storejsplus</h1><h2 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h2><p>基于<a href="https://github.com/marcuswestin/store.js">store.js</a>实现的跨浏览器持久化数据方案。</p><h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><p>webStorage（标准浏览器 + ie 8+） + userData （ie 6/7）。<br>由于最近项目场景恰好需要sessionStorage，故将store.js中默认的loaclStorage改为sessionStorage。具体方式可按需选择。</p><h3 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h3><p>webStorage没什么好说，不过还是要留意下存储上限，不同浏览器间有差异，详见<a href="http://dev-test.nemikor.com/web-storage/support-test/">http://dev-test.nemikor.com/web-storage/support-test/</a>。</p><h3 id="userData"><a href="#userData" class="headerlink" title="userData"></a>userData</h3><p>userDate的存储上限却很麻烦，<a href="https://msdn.microsoft.com/en-us/library/ms531424(v=vs.85).aspx">详见</a>。</p><table>  <tbody>    <tr>      <th> Security Zone </th>      <th> Document Limit (KB) </th>      <th> Domain Limit (KB) </th>    </tr>    <tr>      <td> Local Machine </td>      <td> 128 </td>      <td> 1024 </td>    </tr>    <tr>      <td> Intranet </td>      <td> 512 </td>      <td> 10240 </td>    </tr>    <tr>      <td> Trusted Sites </td>      <td> 128 </td>      <td> 1024 </td>    </tr>    <tr>      <td> Internet </td>      <td> 128 </td>      <td> 1024 </td>    </tr>    <tr>      <td> Restricted </td>      <td> 64 </td>      <td> 640 </td>    </tr>  </tbody></table><p>稳妥起见，将数据分割成最小的每片64K分别存储。仅数据分片还不行，还要为每个数据分片load一个StorageName。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">storage.load(store.userDataStorageName)</span><br></pre></td></tr></table></figure><p>这样才会在用户本地生成相应的物理文件来存储数据。注意：不要轻易删除userdata的物理文件，否则浏览器可能报错，需要通过清IE缓存（有时候还需要重启电脑，原因未知，但确实解决了问题）解决。</p><h3 id="跨目录访问"><a href="#跨目录访问" class="headerlink" title="跨目录访问"></a>跨目录访问</h3><p>跨目录暂时没用到，userDate可通过window.name处理，webStorage可通过Communication APIs处理，这里不再细说。</p><h3 id="存储耗时"><a href="#存储耗时" class="headerlink" title="存储耗时"></a>存储耗时</h3><p>200K测试数据，webStorage仅2ms左右，userData每片64K，200K分四片，需要2000ms。</p><h3 id="关于数据大小和字符长度的关系"><a href="#关于数据大小和字符长度的关系" class="headerlink" title="关于数据大小和字符长度的关系"></a>关于数据大小和字符长度的关系</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>utf-8是在Unicode基础上衍生出的可变长度字符编码，一个字符可占1-4个字节。</p><p>规则：</p><div>  <p> Unicode符号范围   |        UTF-8编码方式<br>    (十六进制)          |              （二进制）<br>    --------------------+---------------------------------------------<br>    0000 0000-0000 007F | 0xxxxxxx<br>    0000 0080-0000 07FF | 110xxxxx 10xxxxxx<br>    0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx<br>    0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</p>  <p>如果一个字节的第一位是0，则这个字节单独就是一个字符；如果第一位是1，则连续有多少个1，就表示当前字符占用多少个字节。</p></div><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在文本文件中使用UTF-8编码。</p><p>var s = “一”;<br>s.charCodeAt(0).toString(16)为4e00，根据上表，“一”占3字节。</p><p>utf-8有一个“头”，根据头编辑器选择合适的编码显示。例二个汉字“一二”，16进制查看为“EF BB BF E4 B8 80 E4 BA  8C ”，头3字节、一3字节、二3字节，共9字节。</p><p>19 Oct 2015  </p>]]></content>
      
      
      
        <tags>
            
            <tag> html5 </tag>
            
            <tag> webStorage </tag>
            
            <tag> userData </tag>
            
            <tag> store.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ExternalInterface.call</title>
      <link href="/2021/07/20/as3/ExternalInterface_call/"/>
      <url>/2021/07/20/as3/ExternalInterface_call/</url>
      
        <content type="html"><![CDATA[<p>ExternalInterface.call如果调用失败，不光会引发错误，还会返回null。用返回值时要多加注意！  </p><p>10 Oct 2015  </p>]]></content>
      
      
      
        <tags>
            
            <tag> as3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>把特定文件从暂存区删除</title>
      <link href="/2021/07/20/git/git_rm_cached/"/>
      <url>/2021/07/20/git/git_rm_cached/</url>
      
        <content type="html"><![CDATA[<p>把特定文件从暂存区删除。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached &lt;filename&gt; </span><br><span class="line">git commit -m &quot;sth commit&quot; </span><br><span class="line">git push origin &lt;branch&gt; </span><br></pre></td></tr></table></figure><p>重新提交后，配合修改.gitignore，可以在本地保存文件并将其从服务器端删除。  </p><p>09 Oct 2015  </p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>较timer更为准确的倒计时方法</title>
      <link href="/2021/07/20/as3/countdown/"/>
      <url>/2021/07/20/as3/countdown/</url>
      
        <content type="html"><![CDATA[<p>从同事处得来一较为准确的倒计时方法。  </p><p>Timer的计时由于帧频原因或者CPU占用过高，会随着时间推移而越发不准确。<br>应对办法之一就是每隔一段时间(例如300ms)校正一次，进而达到接近准确的目的。  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">var</span> countdownTimer:Timer = <span class="keyword">new</span> Timer(<span class="number">300</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">var</span> timestamp:<span class="built_in">Number</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">var</span> countdowns:<span class="built_in">Array</span> = [];</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">var</span> countdownSeconds : Dictionary = <span class="keyword">new</span> Dictionary();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">addCountdown</span>(<span class="params">method:<span class="built_in">Function</span>, second:<span class="built_in">Number</span></span>):<span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> index:int = countdowns.indexOf(method);</span><br><span class="line">  <span class="keyword">if</span> (index &gt;= <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!countdownTimer.hasEventListener(TimerEvent.TIMER))</span><br><span class="line">  &#123;</span><br><span class="line">    countdownTimer.addEventListener(TimerEvent.TIMER, countDownHandler);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!countdownTimer.running)</span><br><span class="line">  &#123;</span><br><span class="line">    timestamp = getTimer();</span><br><span class="line">    countdownTimer.start();</span><br><span class="line">  &#125;</span><br><span class="line">  countdowns.push(method);</span><br><span class="line">  countdownSeconds[method] = second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">removeCountdown</span>(<span class="params">method:<span class="built_in">Function</span></span>):<span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (method == <span class="literal">null</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> index:int = countdowns.indexOf(method);</span><br><span class="line">  <span class="keyword">if</span> (index &gt;= <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    countdowns.splice(index, <span class="number">1</span>);</span><br><span class="line">    countdownSeconds[method] = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">delete</span> countdownSeconds[method];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (countdowns.length == <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    countdownTimer.stop();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">countDownHandler</span>(<span class="params">e:TimerEvent</span>):<span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> remain:<span class="built_in">Number</span> = (getTimer() - timestamp) * <span class="number">0.001</span>;</span><br><span class="line">  timestamp = getTimer();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i:int = <span class="number">0</span>; i &lt; countdowns.length; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">var</span> func:<span class="built_in">Function</span> = countdowns[i];</span><br><span class="line">    <span class="keyword">var</span> second:<span class="built_in">Number</span> = countdownSeconds[func];</span><br><span class="line">    second -= remain;</span><br><span class="line">    func(second);</span><br><span class="line">    countdownSeconds[func] = second;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>21 Aug 2015  </p>]]></content>
      
      
      
        <tags>
            
            <tag> as3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ai2Canvas插件</title>
      <link href="/2021/07/20/html5/Ai2Canvas/"/>
      <url>/2021/07/20/html5/Ai2Canvas/</url>
      
        <content type="html"><![CDATA[<p>Adobe Illustrator有一个名为Ai-&gt;Canvas的插件，允许你将绘制好的矢量图转换成画布代码。<br><a href="https://github.com/mikeswanson/Ai2Canvas">https://github.com/mikeswanson/Ai2Canvas</a>  </p><iframe  height=480 width=854 src="https://www.youtube.com/embed/L1W9AyK2MPc"  frameborder=0  allowfullscreen></iframe><p>14 Aug 2015  </p>]]></content>
      
      
      
        <tags>
            
            <tag> html5 </tag>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Loader.load()方法中的loaderContext参数</title>
      <link href="/2021/07/20/as3/loaderContext-in-load/"/>
      <url>/2021/07/20/as3/loaderContext-in-load/</url>
      
        <content type="html"><![CDATA[<p>前提条件<br>A.swf, B.swf<br>AB同一工程里，AB共同使用X.as，发布A；X.as添加方法x()，B使用x()，发布B。<br>A加载B。  </p><p>1：Loader.load(new URLRequest(B.swfUrl));<br>load方法第二个参数context为null时，已加载的内容保存在自己的安全域中，此时A、B各自使用发布时的X.as。<br>此时不会报错。  </p><p>2：Loader.load(new URLRequest(B.swfUrl), ApplicationDomain.currentDomain);<br>加载器自己的应用域（B在A的应用域）。A和B可以直接使用对方的类。A B共同使用X.as，则实际使用的是A发布时的X.as（修改前的X.as）。即“如果子级试图定义的类与父级已定义的类同名，则使用父类并忽略子类”。<br>此时B会报错，x()不是方法。  </p><p>3：Loader.load(new URLRequest(B.swfUrl), new ApplicationDomain(ApplicationDomain.currentDomain));<br>默认值。允许B直接通过编写 new MyClassDefinedInParent() 来使用A的类。但是A则不能使用此语法；如果A要使用B的类，它必须调用 ApplicationDomain.getDefinition() 来检索它们。<br>此时B依旧会报错。  </p><p>4：Loader.load(new URLRequest(B.swfUrl), new ApplicationDomain(null));<br>系统 ApplicationDomain 的子级。这将完全分离A和B，从而允许它们使用相同的名称定义各自版本的类并且不会产生冲突或隐藏。一方查看另一方的类的唯一方式是调用 ApplicationDomain.getDefinition() 方法。<br>此时不会报错。  </p><p>SecurityDomain和ApplicationDomain<br>ApplicationDomain 类是分散的类定义组的一个容器。应用程序域用于划分位于同一个安全域中的类。已加载的类仅在其父级中没有相关定义时才进行定义。不能用较新的定义覆盖已加载的类定义。  </p><p><a href="https://github.com/yangfan1122/docs/blob/gh-pages/examples/2015-08-13-loaderContext_in_load_example.rar">源码</a><br>13 Aug 2015  </p>]]></content>
      
      
      
        <tags>
            
            <tag> as3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>canvas的save和restore方法</title>
      <link href="/2021/07/20/html5/canvas-save-restore/"/>
      <url>/2021/07/20/html5/canvas-save-restore/</url>
      
        <content type="html"><![CDATA[<p>新增的状态保存到栈的顶部，且会最先被取出。<br>无限次restore后，会重复第一次save的状态。</p><p>11 Aug 2015  </p>]]></content>
      
      
      
        <tags>
            
            <tag> html5 </tag>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
